package net.projecteuler.euler.src.main.java;

import java.util.ArrayList;
import java.util.List;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * <p>
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * <p>
 * Let us list the factors of the first seven triangle numbers:
 * <p>
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * <p>
 * What is the value of the first triangle number to have over five hundred divisors?
 */

public class Task_12 {
    public static void main(String[] args) {
        long triangleNumber = 1;
        for (long i = 2; i < 741989; i++) { // Генерим треугольное число
            triangleNumber += i;
            List<Long> divisors = new ArrayList<>();

            if (triangleNumber % 2 == 0) { // Проверяем только четные
                divisors = findDivisors(triangleNumber);
            }
            if (divisors.size() > 248) {
                System.out.println("#" + i + ". Triangle number is " + triangleNumber + ". Divisors: " + divisors + "\nDivisors q-ty: " + divisors.size()*2);
                break;
            }
        }
    }

    // не считаем 1 и само число
    private static List<Long> findDivisors(Long number) {
        List<Long> divisors = new ArrayList<>();

        long i;
        for (i = 2; i <= number / i; i++) {
            if (number % i == 0) {
                divisors.add(i);
            }
        }

//        List<Long> bigDivisors = new ArrayList<>();
//        divisors.forEach(divisor -> bigDivisors.add(number/divisor));
//        divisors.addAll(bigDivisors);

        return divisors;
    }
}
